#!/bin/bash

# load libs
source "$(dirname "$0")/paneless_keyboard"  || { echo "paneless: can't find keyboard library" ; exit 1 ; }
source "$(dirname "$0")/paneless_core"      || { echo "paneless: can't find core library" ; exit 1 ; }
source "$(dirname "$0")/paneless_functions" || { echo "paneless: can't find functions library" ; exit 1 ; }

# Parse options
declare -A e # extra options for the customization scripts
declare -A custom_column # custom renderers

[[ "$1" ]]  || { echo "paneless: need at least one input" ; exit 1 ; }

options=$(getopt -o ac:C:e:lLt:w:h -l help,ansi,custom:,line-number:,no-bindings,no-color,status-line -n "$0" -- "$@") || exit
eval set -- "$options"

while [[ $1 != -- ]]; do
	case $1 in
		-a|--ansi       ) ansi=1                                    ; shift   ;;
		-c|--custom     ) customization=$2                          ; shift 2 ;;
		-C              ) custom_column[$2]=1                       ; shift 2 ;;
		-e              ) IFS=$'=' <<<"$2" read -r K V ; e[$K]="$V" ; shift 2 ;;
		-L              ) overlay_line_number=2                     ; shift   ;;
		--no-bindings   ) no_bindings=1                             ; shift   ;;
		--no-color      ) no_color=1                                ; shift   ;;
		--status-line   ) status_line=1                             ; shift   ;;
		-t              ) tab_size=$2                               ; shift 2 ;;
		-w              ) widths+=($2)                              ; shift 2 ;;
		-h|--help       )
				echo "NAME"
				echo "    paneless - multipane pager"
				echo
				echo "SYNOPSIS"
				echo "    paneless file <(seq 5 ) file ..."
				echo
				echo "OPTIONS"
				echo "    -a|--ansi        ansi input"
				echo "    -c|--custom      custom script"
				echo "    -e               custom argument"
				echo "    -l|-L            display line number"        
				echo "    --no-bindings    only quit bindings"
				echo "    --no-color       do not color text"
				echo "    --status-line    custom status line"
				echo "    -t               tabsize"
				echo "    -w              'characters|percent'"
				exit ;;
		*               ) echo "paneless: bad option: $1" >&2; exit 1;;
	esac
done
shift # -- in argument list to getopt

# Settings
PANELESS_GLYPH=$'\e[2;30m'

BLACK=$'\e[30m' RED=$'\e[31m'     GREEN=$'\e[32m' YELLOW=$'\e[33m'     DIM_YELLOW=$'\e[2;33m'
BLUE=$'\e[34m'  MAGENTA=$'\e[35m' CYAN=$'\e[36m'  LIGHT_GREY=$'\e[37m' RESET=$'\e[0m'

colors=($CYAN $MAGENTA $GREEN $DIM_YELLOW) ; 
tab_size=8

# Bindings
KEY_TIMEOUT=0.5
leader_key='BACKSLASH'

bind paneless paneless		q		quit			"quit"
bind paneless paneless		Q		quit_no_clear		"quit leaving the panes visible"
bind paneless paneless		c		k_bindings		"show command bindings"

((! no_bindings)) &&
	{
	bind paneless paneless		r		list			"refresh"
	bind paneless paneless		R		reload			"reload"

	bind paneless move		PGUP		move_page_up		"page up"
	bind paneless move		CTL-B		move_page_up		"page up"
	bind paneless move		SPACE		move_page_down		"page down"
	bind paneless move		PGDN		move_page_down		"page down"
	bind paneless move		CTL-F		move_page_down		"page down"

	bind paneless move		DOWN		move_down_arrow		"scroll down"
	bind paneless move		UP		move_up_arrow		"scroll up"
	bind paneless move		j		move_down		"scroll down"
	bind paneless move		k		move_up			"scroll up"

	bind paneless move		gg		goto_first_line		"go to the first line"
	bind paneless move		G		goto_last_line		"go to the last line"

	bind paneless move		RIGHT		move_right		"move right"
	bind paneless move		l		move_right		"move right"
	bind paneless move		LEFT		move_left		"move left"
	bind paneless move		h		move_left		"move left"

	bind paneless find		gff		find_fzf		"fzf find"
	bind paneless find		b		find_fzf		"fzf find"
	bind paneless find		/		search			"search"
	bind paneless find		n		find_next		"find next"
	bind paneless find		N		find_previous		"find previous"

	bind paneless display		zl		flip_line_number	"flip line number overlay"
	bind paneless display		zt		flip_line_total		"flip line total"
	}

# main loop

[[ "$customization" ]] && source "$customization"

ARGV=("$@") # used to reload files

load_input_streams "$@"

while : ; do winch ; get_key $KEY_TIMEOUT && try key_command ; kbdf ; winch=1 ; done

# vim: set filetype=bash:

