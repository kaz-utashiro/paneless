# Bound functions

flip_line_number(){ ((overlay_line_number++)) ; ((overlay_line_number > 2)) && overlay_line_number=0 ; list ; }
flip_line_total() { [[ "$overlay_line_total" ]] && overlay_line_total= || overlay_line_total="/${#lines[@]}" ; list ; }
goto_first_line() { top_line=0 ; list ; }
goto_last_line()  { (( top_line = (max_lines + 1) - LINES )) ; list ; }
move_down()       { (( top_line < max_lines && top_line++ )) ; list ; }
move_down_arrow() { move_down ; }
move_up()         { (( top_line > 0 && top_line--)) ; list ; }
move_up_arrow()   { move_up ; }
move_page_down()  { (( top_line += LINES )) ; (( top_line > ((max_lines + 1) - LINES) )) && ((top_line=((max_lines + 1) - LINES) )) ; list ; }
move_page_up()    { (( top_line -= LINES )) ; (( top_line < 0 )) && top_line=0 ; list ; }
move_right()      { (( start_character+=16 )) ; create_panes ; list ; } 
move_left()       { (( start_character > 0)) && (( start_character = start_character - 16 )) ; create_panes ; list ; } 
quit()            { restore_screen ; rm -rf $fs ; exit ; }
quit_no_clear()   { tput cnorm ; stty echo ; rm -rf $fs ; exit ; }

search() { search_string= ; find_next ; }

find_next()
{
[[ "$search_string" ]] || { prompt 'search: ' ; search_string="$REPLY" ; }
[[ "$search_string" ]] || { list ; return ; }

found=$(tail -n +$((top_line + 2)) "$serialized_panes" | rg -n -m 1 "$search_string" | cut -d: -f1)

[[ "$found" ]] && { ((top_line += found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

find_previous()
{
[[ "$search_string" ]] || search_string="$(search_string)"
[[ "$search_string" ]] || { list ; return ; }

found=$(head -n $top_line "$serialized_panes" | tac | rg -n -m 1 "$search_string" | cut -d: -f1)

[[ "$found" ]] && { ((top_line -= found)) ; highlight=1 ; list ; } || { highlight= ; list ; }
}

find_fzf()
{
exec 2>&9

source_index=-1
for source_name in "${source_names[@]}"
	do
		((source_index++))
		declare -n source_ref="$source_name"
		
		source_source_name="${source_source[$source_index]}" ;
		[[ "$source_source_name" =~ ^/dev/fd ]] && display_name="$source_name" || display_name="$source_source_name"
		
		display_name=$"$PANELESS_GLYPH$display_name:"
		
		for i in $( seq 0 ${#source_ref[@]})
			do
				printf "$display_name %s $BLACK(%d)$RESET\n" "${source_ref[i]//[$'\r\n']}" $i
			done
	
	done | fzf +s --ansi --keep-right

exec 2>"$fs/log"

alt_screen ; list
}

# vim: set filetype=bash:

