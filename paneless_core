
reload_input_streams()
{
exec 2>&1
SOURCES=("$@") SOURCE_INDEXES="$(seq 0 $(( ${#SOURCES[@]} - 1)) )"

load_input_streams
}

load_input_streams()
{
[[ ${#SOURCES[@]} == 0 ]] && echo "paneless: nothing to display" && exit

rm -f $fs/*
compute_pane_sizes

source_index=-1
for fd in "${SOURCES[@]}" ; do
	(( source_index++ ))
	custom_render="${custom_initial_renderer[$source_index]}"

	[[    "$custom_render" ]] && ${custom_initial_renderer[$source_index]} | $EXPAND -t "$tab_size"       >$fs/expanded_$source_index &
	[[ -z "$custom_render" ]] &&                                             $EXPAND -t "$tab_size" "$fd" >$fs/expanded_$source_index &
done

wait
for source_index in $SOURCE_INDEXES ; do
	<$fs/expanded_$source_index wc -l >$fs/max_$source_index &
done

wait
max_lines="$(cat $fs/max_* | sort -rh | head -1)"

for source_index in $SOURCE_INDEXES ; do
	(( text_length = pane_columns[source_index] - 1 ))

	perl -e '$line = $ARGV[0] . (" " x ($ARGV[1] - 1)) ; print "$line\n" for 1 .. $ARGV[2]' \
		"$continuation_glyph" $text_length $(( $max_lines - $(cat $fs/max_$source_index) )) >$fs/vpad_$source_index &
done

wait
for source_index in $SOURCE_INDEXES ; do
	cat $fs/expanded_$source_index $fs/vpad_$source_index >$fs/vpadded_$source_index
done

create_panes

alt_screen ; top_line=0 ; list ;
}

create_panes()
{
lines=()
current_color=0

for source_index in $SOURCE_INDEXES ; do
	(( no_color )) && color= || { color=${colors[current_color]} ; (( current_color++, current_color >= ${#colors[@]} )) && current_color=0 ; }
	(( text_length = pane_columns[source_index] - 1 ))
	
	<$fs/vpadded_$source_index ansifold -nx"$tab_size" --padding -w -$start_character,$text_length | sed "s/^/$color/" >$fs/cut_$source_index &
done

wait
perl -e "$ppaste" "$PANELESS_GLYPHâ”‚$RESET" $fs/cut_* >$fs/joined

(( generate )) && { echo "paneless: generated in '$fs/joined'" ; exit ; }
(( generate_name_only )) && { echo "$fs/joined" ; exit ; }

<$fs/joined readarray -t lines
}

list()
{
LINES=$(tput lines)
(( bottom_line = $LINES - status_line ))

for(( line = 1, pline = top_line ; line <= bottom_line ; line++, pline++ )) ; do
	overlay_line $line $pline ||
		{
		(( pline < ${#lines[@]} )) && { echo -en "\e[$line;1H\e[K" ; echo -n "${lines[pline]}" ; } || echo -en "\e[$line;1H\e[K$continuation_glyph"
		}

done

update_status

(( overlay_line_number == 1 )) && echo -en "\e[H$MAGENTA[$(( top_line + 1 ))$overlay_line_total]$RESET"
(( overlay_line_number == 2 )) && echo -en "\e[$bottom_line;0H$MAGENTA[$(( top_line + bottom_line ))$overlay_line_total]$RESET"

overlay_text
}

get_pane_text() { echo "paneless: calling default get_pane_text makes no sense" ; quit_no_clear  ; }
overlay_line()  {  return 1 ; }
overlay_text()  {  : ; }
update_status() { (( status_line )) && echo -en "\e[$(( bottom_line + 2 ));0H\e[K" ; }

compute_pane_sizes()
{
pane_columns=()
used_columns=0

(( remaining_cols = ${terminal_size:-$COLS}, remaining_perc = 100, sharing_panes = ${#SOURCES[@]} , sources = ${#SOURCES[@]} ))

for w in "${widths[@]}" ; do
	if   [[ "$w" =~ [[:digit:]][[:digit:]]$  ]] ; then 
		(( wt = w + 1 ))
		pane_columns+=($wt)
		(( sharing_panes-- , remaining_cols -= wt, remaining_cols >= 0 )) || { echo "paneless: can't fit $w" && exit 1 ; }

	elif [[ "$w" =~ [[:digit:]][[:digit:]]\%$ ]] ; then
		pane_columns+=($w)
		(( sharing_panes-- , remaining_perc -= ${w:0:-1} , remaining_perc >= 0 )) || { echo "paneless: can't fit $w" && exit 1 ; }

	else pane_columns+=('')
	fi
done

(( pane_share = (remaining_cols * remaining_perc) / (sharing_panes * 100) )) || pane_share=0
(( pane_share <= 0 )) && { echo "paneless: not enought room" ; exit 1 ; }

for (( source_index = 0 ; source_index < $sources ; source_index++ )) ;do
	[[ "${pane_columns[source_index]}" ]] &&
		{
		[[ "${pane_columns[source_index]}" =~ [[:digit:]][[:digit:]]% ]] &&
			(( pane_columns[source_index] = remaining_cols * ${pane_columns[source_index]:0:-1}  / 100 ))
		
		true
		} ||
		{
		(( pane_columns[source_index] = $pane_share ))
		}
done

for (( source_index = 0 ;  source_index < $sources ; source_index++ )) ;do
	# compute padding for each pane
	padding[source_index]="$continuation_glyph$(perl -e 'print " " x ($ARGV[0] - 2)' "${pane_columns[source_index]}")"
	
	(( used_columns += pane_columns[source_index] ))
done

end_padding="$(perl -e 'print " " x $ARGV[0]' $(( COLS - used_columns )))"
}


read -r -d '' ppaste <<'EOC'
use strict ; use warnings ;
use FileHandle ;

my $separator = shift @ARGV  // '' ;

my @fhs = map { FileHandle->new("< $_") or die "paneless: can't open '$_'\n"} @ARGV ;

while(1)
	{
	my ($reads, $line) = (0, '') ;

	for my $fh (@fhs)
		{
		$_ = $fh->getline ;
		$line .= defined $_ ? do { $reads++ ; chomp ; "$_$separator" } : $separator ;
		}
	
	last unless $reads ;

	print $line, "\n" ;
	}
EOC

read -r -d '' ansi_substr <<'EOC'
use strict ; use warnings ; use Encode ;

while(<STDIN>)
	{
	chomp ;
	print( ($ARGV[3] // '') . nk_mbsubstr($_ . (" " x $ARGV[0]), $ARGV[1], $ARGV[2] // 0) . "\n") ;
	}

sub nk_mbsubstr
{
my ($string, $start, $end) = @_ ;
$end += $start ; # length to position

my ($substring, $s_length, $u_length) = ('', 0, 0) ;
my ($latest_color, $first_color)      = ('') ;
my ($substr_start, $substr_end)       = (0, 0) ;

my $ANSI = "((?:\e\[[0-9;]*m)+)" ;

for my $chunk ( split /$ANSI/, $string )
	{
	if($chunk =~ /$ANSI/)
		{
		$latest_color = $1 ;
		$s_length += length($1) ;
		}
	else
		{
		my $u_chunk = decode('utf8', $chunk) ;
		my $u_chunk_length = length($u_chunk) ;
		
		if((! defined $first_color) && $u_length + $u_chunk_length > $start)
			{
			$first_color = $latest_color ;
			my $s_chunk_substr = substr($u_chunk, 0, ($start - $u_length)) ;
			$s_chunk_substr = encode('utf8', $s_chunk_substr) ;
			
			$substr_start = $s_length + length($s_chunk_substr) ;
			}
		
		if($u_length + $u_chunk_length >= $end)
			{
			my $s_chunk_substr = substr($u_chunk, 0, ($end - $u_length)) ;
			$s_chunk_substr = encode('utf8', $s_chunk_substr) ;
			
			$substr_end = $s_length + length($s_chunk_substr) ;
			last ;
			}
		else
			{
			$u_length += $u_chunk_length ;
			$s_length += length($chunk) ;
			$substr_end = $s_length ;
			}
		}
	}

defined $first_color ? $first_color . substr($string, $substr_start, $substr_end - $substr_start) . "\e[m" : ''
}
EOC

reload() { source_names=() ; line_blocks=() ; lines=() ; load_input_streams "${ARGV[@]}"  ; }

geo_winch()       { geometry ; WCOLS=$COLS ; WLINES=$LINES ; }
geometry()        { { read LINES ; read COLS ; } < <(tput lines cols) ; }
winch()           { (( winch )) || return ; geometry ; (( WCOLS != COLS )) && { create_panes ; list ; true ; } || (( WLINES != LINES )) && list ; WCOLS=$COLS ; WLINES=$LINES ; }
pdhn()            { echo "$@" ; read -sn1 ; }
try()             { exec 9>&2 2>"$fs/log" ; "$@" ; exec 2>&9 ; [[ -s $fs/log ]] && try_errorp ; }
try_error()       { echo "echo -ne '\e[2J\e[H\e[31m' ; cat $fs/log | tee -a $fs/errors_log && rm $fs/log" ; }
try_errorp()      { pdhn  "$(cat $fs/log)" ; tmux popup -w 80% "$(try_error)" ; }
prompt()          {  exec 2>&9 ; stty echo ; echo -ne "\e[H\e[K$MAGENTA\e[?25h" ; read -e -rp "$@" ; echo -ne '\e[m' ; stty -echo ; tput civis ; exec 2>"$fs/log" ; }
alt_screen()      { echo -en '\e[?1049h' ; stty -echo ; tput civis ; }
restore_screen()  { tput cnorm ; stty echo ; echo -ne "\e[?25l\e[?25h\e[?1049l" ; }

# core setup
continuation_glyph=$"$DARK_GREY$PANELESS_GLYPH$CONTINUATION_GLYPH$RESET"
(( ansi )) && { hash ansiexpand >/dev/null && EXPAND=ansiexpand || EXPAND=expand ; } || EXPAND=expand

start_character=0

fs="$(mktemp -u -p /tmp/$USER paneless_XXXXXX)" ; mkdir -p $fs # work directory

geo_winch   # save terminal size

# vim: set filetype=bash:
